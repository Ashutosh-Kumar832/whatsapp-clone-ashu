[{"F:\\WhatsApp_clone_ashu\\whatsapp-clone-ashu\\src\\index.js":"1","F:\\WhatsApp_clone_ashu\\whatsapp-clone-ashu\\src\\App.js":"2","F:\\WhatsApp_clone_ashu\\whatsapp-clone-ashu\\src\\reportWebVitals.js":"3","F:\\WhatsApp_clone_ashu\\whatsapp-clone-ashu\\src\\reducer.js":"4","F:\\WhatsApp_clone_ashu\\whatsapp-clone-ashu\\src\\serviceWorker.js":"5","F:\\WhatsApp_clone_ashu\\whatsapp-clone-ashu\\src\\StateProvider.js":"6","F:\\WhatsApp_clone_ashu\\whatsapp-clone-ashu\\src\\Login.js":"7","F:\\WhatsApp_clone_ashu\\whatsapp-clone-ashu\\src\\Sidebar.js":"8","F:\\WhatsApp_clone_ashu\\whatsapp-clone-ashu\\src\\UseWindowDimensions.js":"9","F:\\WhatsApp_clone_ashu\\whatsapp-clone-ashu\\src\\Chat.js":"10","F:\\WhatsApp_clone_ashu\\whatsapp-clone-ashu\\src\\Loader.js":"11","F:\\WhatsApp_clone_ashu\\whatsapp-clone-ashu\\src\\firebase.js":"12","F:\\WhatsApp_clone_ashu\\whatsapp-clone-ashu\\src\\SidebarChat.js":"13","F:\\WhatsApp_clone_ashu\\whatsapp-clone-ashu\\src\\constants.js":"14"},{"size":641,"mtime":1604648883000,"results":"15","hashOfConfig":"16"},{"size":1005,"mtime":1607125984153,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":499162500000,"results":"18","hashOfConfig":"16"},{"size":951,"mtime":1604648883000,"results":"19","hashOfConfig":"16"},{"size":5098,"mtime":1604648883000,"results":"20","hashOfConfig":"16"},{"size":364,"mtime":1604648883000,"results":"21","hashOfConfig":"16"},{"size":1593,"mtime":1607128279815,"results":"22","hashOfConfig":"16"},{"size":6523,"mtime":1607125605645,"results":"23","hashOfConfig":"16"},{"size":591,"mtime":1604648883000,"results":"24","hashOfConfig":"16"},{"size":36352,"mtime":1607126016875,"results":"25","hashOfConfig":"16"},{"size":140,"mtime":1604648883000,"results":"26","hashOfConfig":"16"},{"size":763,"mtime":1607127753043,"results":"27","hashOfConfig":"16"},{"size":3078,"mtime":1607125653714,"results":"28","hashOfConfig":"16"},{"size":103,"mtime":1607166998778,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"hcsfse",{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"32"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\WhatsApp_clone_ashu\\whatsapp-clone-ashu\\src\\index.js",[],["63","64"],"F:\\WhatsApp_clone_ashu\\whatsapp-clone-ashu\\src\\App.js",["65","66"],"import React from \"react\";\nimport \"./App.css\";\nimport Sidebar from \"./Sidebar\";\nimport Chat from \"./Chat\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Login from \"./Login\";\nimport { useStateValue } from \"./StateProvider\";\nimport UseWindowDimensions from \"./UseWindowDimensions\";\n\nfunction App() {\n  const [{ user }, dispatch] = useStateValue();\n  const { width } = UseWindowDimensions();\n  const uid =\n    localStorage.getItem(\"uid\") !== undefined\n      ? localStorage.getItem(\"uid\")\n      : null;\n\n  return (\n    <div className=\"app\">\n      {!user && !uid ? (\n        <Login />\n      ) : (\n        <div className=\"app__body\">\n          <Router>\n            <Sidebar />\n            <Switch>\n              <Route path=\"/rooms/:roomId\">\n                <Chat />\n              </Route>\n              <Route path=\"/\">\n                <Chat />\n              </Route>\n            </Switch>\n          </Router>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","F:\\WhatsApp_clone_ashu\\whatsapp-clone-ashu\\src\\reportWebVitals.js",[],"F:\\WhatsApp_clone_ashu\\whatsapp-clone-ashu\\src\\reducer.js",[],"F:\\WhatsApp_clone_ashu\\whatsapp-clone-ashu\\src\\serviceWorker.js",[],"F:\\WhatsApp_clone_ashu\\whatsapp-clone-ashu\\src\\StateProvider.js",[],"F:\\WhatsApp_clone_ashu\\whatsapp-clone-ashu\\src\\Login.js",["67","68","69"],"F:\\WhatsApp_clone_ashu\\whatsapp-clone-ashu\\src\\Sidebar.js",["70","71","72","73","74","75"],"import React, { useState, useEffect } from \"react\";\nimport { Avatar, Collapse, IconButton } from \"@material-ui/core\";\nimport DonutLargeIcon from \"@material-ui/icons/DonutLarge\";\nimport ChatIcon from \"@material-ui/icons/Chat\";\nimport SearchOutlined from \"@material-ui/icons/SearchOutlined\";\nimport SidebarChat from \"./SidebarChat\";\nimport \"./Sidebar.css\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport db from \"./firebase\";\nimport { useStateValue } from \"./StateProvider\";\nimport { actionTypes } from \"./reducer\";\nimport UseWindowDimensions from \"./UseWindowDimensions\";\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\nimport Loader from \"./Loader\";\n\nfunction Sidebar() {\n  const [rooms, setRooms] = useState([]);\n  const [toggler, setToggler] = useState(false);\n  const [sidebarBool, setsidebarBool] = useState(true);\n  const [{ togglerState }, dispatch] = useStateValue();\n  const [search, setSearch] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [logout, setLogout] = useState(false);\n  const { width } = UseWindowDimensions();\n  const matcher = (s, values) => {\n    const re = RegExp(`.*${s.toLowerCase().split(\"\").join(\".*\")}.*`);\n    return values.filter((v) => v.data.name.toLowerCase().match(re));\n  };\n  const handleChange = (e) => {\n    setsidebarBool(false);\n    setInput(e.target.value);\n  };\n  const exitApp = () => {\n    localStorage.removeItem(\"uid\");\n    window.location.reload();\n    setLogout(true);\n  };\n  useEffect(() => {\n    if (rooms.length > 0) {\n      setSearch(matcher(input, rooms));\n    }\n    if (input === \"\") {\n      setsidebarBool(true);\n    }\n  }, [input]);\n\n  useEffect(() => {\n    const unsubscribe = db\n      .collection(\"rooms\")\n      .orderBy(\"timestamp\", \"desc\")\n      .onSnapshot((snapshot) => {\n        setRooms(\n          snapshot.docs.map((doc) => ({\n            id: doc.id,\n            data: doc.data(),\n          }))\n        );\n      });\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  useEffect(() => {\n    setToggler(!toggler);\n  }, [togglerState]);\n  const handleDrawerToggle = () => {\n    setToggler(toggler);\n\n    dispatch({\n      type: actionTypes.SET_TOGGLER,\n      togglerState: togglerState + 1,\n    });\n  };\n  const photoURL =\n    localStorage.getItem(\"photoURL\") !== \"\"\n      ? localStorage.getItem(\"photoURL\")\n      : null;\n  const displayName = localStorage.getItem(\"displayName\");\n\n  return (\n    <>\n      {width < 629 ? (\n        <div\n          className={\n            togglerState % 2 !== 0 ? \"sidebar\" : \"sidebar hide__sidebar\"\n          }\n        >\n          <div className=\"siderbar__wrapper\">\n            <IconButton\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              edge=\"start\"\n              className=\"sidebar__burger\"\n              onClick={handleDrawerToggle}\n            >\n              <MenuIcon />\n            </IconButton>\n            <div className=\"sidebar__header\">\n              <Avatar src={photoURL} />{\" \"}\n              <p className=\"sidebar__greeting mobile__tag\">\n                {\" \"}\n                <h1>\n                  <span style={{ color: \"black\" }}> WhatsApp Ashutosh</span>\n              </h1>\n              </p>\n              <div className=\"sidebar__headerRight\">\n                <IconButton>\n                  <DonutLargeIcon />\n                </IconButton>\n                <IconButton>\n                  <ChatIcon />\n                </IconButton>\n                <IconButton>\n                  <div onClick={exitApp}>\n                    <ExitToAppIcon />\n                  </div>\n                </IconButton>\n              </div>\n            </div>\n          </div>\n          <div className=\"sidebar__search\">\n            <div className=\"sidebar__searchContainer\">\n              <SearchOutlined />\n              <input\n                placeholder=\"Search or Start a new chat\"\n                value={input}\n                type=\"text\"\n                onChange={handleChange}\n              />\n            </div>\n          </div>\n          {sidebarBool ? (\n            <div className=\"sidebar__chats\">\n              <SidebarChat addNewChatVal=\"true\" />\n              {rooms.map((room) => (\n                <SidebarChat key={room.id} id={room.id} name={room.data.name} />\n              ))}\n            </div>\n          ) : (\n            <div className=\"sidebar__chats\">\n              <SidebarChat addNewChatVal=\"true\" />\n              {search.map((room) => (\n                <SidebarChat key={room.id} id={room.id} name={room.data.name} />\n              ))}\n            </div>\n          )}\n        </div>\n      ) : (\n        <div className={\"sidebar\"}>\n          <div className=\"sidebar__header\">\n            <Avatar src={photoURL} />{\" \"}\n            <p className=\"sidebar__greeting\">\n              {\" \"}\n              <h1>\n                  <span style={{ color: \"black\" }}> WhatsApp Ashutosh</span>\n              </h1>\n            </p>\n            <div className=\"sidebar__headerRight\">\n              <IconButton>\n                <DonutLargeIcon />\n              </IconButton>\n              <IconButton>\n                <ChatIcon />\n              </IconButton>\n              <IconButton>\n                <div onClick={exitApp}>\n                  <ExitToAppIcon />\n                </div>\n              </IconButton>\n            </div>\n          </div>\n          <div className=\"sidebar__search\">\n            <div className=\"sidebar__searchContainer\">\n              <SearchOutlined />\n              <input\n                placeholder=\"Search or Start a new chat\"\n                value={input}\n                type=\"text\"\n                onChange={handleChange}\n              />\n            </div>\n          </div>\n          {sidebarBool ? (\n            <div className=\"sidebar__chats scrollbar-juicy-peach\">\n              <SidebarChat addNewChatVal=\"true\" />\n              {rooms.length == 0 ? (\n                <Loader />\n              ) : (\n                rooms.map((room) => (\n                  <SidebarChat\n                    key={room.id}\n                    id={room.id}\n                    name={room.data.name}\n                  />\n                ))\n              )}\n            </div>\n          ) : (\n            <div className=\"sidebar__chats \">\n              <SidebarChat addNewChatVal=\"true\" />\n              {search.map((room) => (\n                <SidebarChat key={room.id} id={room.id} name={room.data.name} />\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default Sidebar;\n","F:\\WhatsApp_clone_ashu\\whatsapp-clone-ashu\\src\\UseWindowDimensions.js",[],"F:\\WhatsApp_clone_ashu\\whatsapp-clone-ashu\\src\\Chat.js",["76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { Avatar, IconButton } from \"@material-ui/core\";\nimport AttachFile from \"@material-ui/icons/AttachFile\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport SearchOutlined from \"@material-ui/icons/SearchOutlined\";\nimport InsertEmoticonIcon from \"@material-ui/icons/InsertEmoticon\";\nimport MicIcon from \"@material-ui/icons/Mic\";\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\nimport db from \"./firebase\";\nimport firebase from \"firebase\";\nimport \"./Chat.css\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { useStateValue } from \"./StateProvider\";\nimport { actionTypes } from \"./reducer\";\nimport UseWindowDimensions from \"./UseWindowDimensions\";\nimport useSound from \"use-sound\";\nimport \"emoji-mart/css/emoji-mart.css\";\nimport { Picker } from \"emoji-mart\";\nimport Linkify from \"react-linkify\";\n\nfunction Chat() {\n  const [seed, setSeed] = useState(\"\");\n  const [input, setInput] = useState(\"\");\n  const { roomId } = useParams();\n  const [roomName, setRoomName] = useState(\"false\");\n  const [messages, setMessages] = useState([]);\n  const [toggler, setToggler] = useState(true);\n  const displayName = localStorage.getItem(\"displayName\");\n  const [{ togglerState }, dispatch] = useStateValue();\n  const [{ photoURL }] = useStateValue();\n  const [emoji, setEmoji] = useState(false);\n  const [issendChecked, setIssendChecked] = useState(false);\n  const [datewise, setDateWise] = useState([]);\n  const [clientGMT, setClinetGMT] = useState(\"\");\n  const [lastseenPhoto, setLastseen] = useState(\"\");\n  const { width } = UseWindowDimensions();\n  var hour = 0,\n    extramin = 0,\n    minutes = 0,\n    hourly = 0,\n    GMTminutes = String(clientGMT).slice(4, 6),\n    scrl,\n    fix = 0;\n\n  const [playOn] = useSound(`${process.env.PUBLIC_URL}/send.mp3`, {\n    volume: 0.5,\n  });\n  const [playOff] = useSound(`${process.env.PUBLIC_URL}/send.mp3`, {\n    volume: 0.5,\n  });\n\n  const addEmoji = (e) => {\n    let emoji = e.native;\n    setInput(input + emoji);\n  };\n  const checkEmojiClose = () => {\n    if (emoji) {\n      setEmoji(false);\n    }\n  };\n\n  function getTimeZone() {\n    var offset = new Date().getTimezoneOffset(),\n      o = Math.abs(offset);\n    return (\n      (offset < 0 ? \"+\" : \"-\") +\n      (\"00\" + Math.floor(o / 60)).slice(-2) +\n      \":\" +\n      (\"00\" + (o % 60)).slice(-2)\n    );\n  }\n  useEffect(() => {\n    setClinetGMT(getTimeZone());\n  });\n  useEffect(() => {\n    setSeed(Math.floor(Math.random() * 5000));\n    if (roomId) {\n      db.collection(\"rooms\")\n        .doc(roomId)\n        .onSnapshot((snapshot) => {\n          setRoomName(snapshot.data().name);\n        });\n\n      db.collection(\"rooms\")\n        .doc(roomId)\n        .collection(\"messages\")\n        .orderBy(\"timestamp\", \"asc\")\n        .onSnapshot((snapshot) => {\n          setMessages(snapshot.docs.map((doc) => doc.data()));\n        });\n    }\n  }, [roomId]);\n  useEffect(() => {\n    setLastseen(messages[messages.length - 1]?.photoURL);\n  }, [messages]);\n\n  const sendMessage = (e) => {\n    e.preventDefault();\n    if (input.length > 0) {\n      db.collection(\"rooms\")\n        .doc(roomId)\n        .collection(\"messages\")\n        .add({\n          message: input,\n          name: displayName,\n          timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n          photoURL: localStorage.getItem(\"photoURL\"),\n        });\n      setIssendChecked(!issendChecked);\n      issendChecked ? playOff() : playOn();\n      setInput(\"\");\n    }\n  };\n\n  let blankObj = {};\n  let TotalObj = [];\n  if (messages.length > 0) {\n    let checkDate = \"\";\n    let blankArray = [];\n    let dateArray = [];\n    messages.forEach(function (message, i) {\n      let messageDate = String(\n        new Date(message.timestamp?.toDate()).toUTCString()\n      ).slice(5, 12);\n      if (dateArray.indexOf(messageDate) === -1) {\n        dateArray.push(messageDate);\n      }\n    });\n    var index = 0;\n    messages.forEach(function (message, i) {\n      let messageDate = String(\n        new Date(message.timestamp?.toDate()).toUTCString()\n      ).slice(5, 12);\n      if (messageDate === dateArray[index] && i == messages.length - 1) {\n        blankArray.push({\n          messageData: message.message,\n          name: message.name,\n          timestamp: message.timestamp,\n        });\n        blankObj[dateArray[index]] = blankArray;\n        TotalObj.push(blankObj);\n        blankObj = {};\n        blankArray = [];\n        blankArray.push({\n          messageData: message.message,\n          name: message.name,\n          timestamp: message.timestamp,\n        });\n        index = index + 1;\n      } else if (messageDate == dateArray[index]) {\n        blankArray.push({\n          messageData: message.message,\n          name: message.name,\n          timestamp: message.timestamp,\n        });\n      } else {\n        blankObj[dateArray[index]] = blankArray;\n        TotalObj.push(blankObj);\n        blankObj = {};\n        blankArray = [];\n        blankArray.push({\n          messageData: message.message,\n          name: message.name,\n          timestamp: message.timestamp,\n        });\n        if (messageDate != dateArray[index] && i == messages.length - 1) {\n          blankObj[messageDate] = blankArray;\n          TotalObj.push(blankObj);\n        }\n        index = index + 1;\n      }\n    });\n  }\n  useEffect(() => {\n    setDateWise(TotalObj);\n  }, [messages]);\n\n  const messagesEndRef = useRef(null);\n  const scrollToBottom = () => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\n    }\n  };\n  useEffect(() => {\n    scrollToBottom();\n  });\n\n  useEffect(() => {\n    setToggler(!toggler);\n  }, [togglerState]);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const handleDrawerToggle = () => {\n    setToggler(!toggler);\n    dispatch({\n      type: actionTypes.SET_TOGGLER,\n      togglerState: togglerState + 1,\n    });\n  };\n  return (\n    <>\n      {width < 629 ? (\n        <div className={togglerState % 2 === 0 ? \"chat\" : \"chat hide__chat\"}>\n          <div className=\"chat__header\">\n            <IconButton\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              edge=\"start\"\n              onClick={handleDrawerToggle}\n            >\n              <ArrowBackIcon />\n            </IconButton>\n            <Avatar src={lastseenPhoto} />\n            <div className=\"chat__headerInfo\">\n              <h3>{roomName}</h3>\n              <p className=\"header__lastSeen\">\n                last seen{\" \"}\n                {messages.length !== 0\n                  ? messages[messages.length - 1].timestamp\n                      ?.toDate()\n                      .toUTCString()\n                  : \"Loading\"}\n              </p>\n            </div>\n            <div className=\"chat__headerRight\">\n              <IconButton>\n                <SearchOutlined />\n              </IconButton>\n              <IconButton>\n                <AttachFile />\n              </IconButton>\n              <IconButton>\n                <MoreVertIcon />\n              </IconButton>\n            </div>\n          </div>\n          <div className=\"chat__header__absolute\">\n            <IconButton\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              edge=\"start\"\n              onClick={handleDrawerToggle}\n            >\n              <ArrowBackIcon />\n            </IconButton>\n            <Avatar src={lastseenPhoto} />\n            <div className=\"chat__headerInfo\">\n              <h3>{roomName}</h3>\n              <p className=\"header__lastSeen\">\n                last seen{\" \"}\n                {messages.length !== 0\n                  ? String(\n                      messages[messages.length - 1].timestamp\n                        ?.toDate()\n                        .toUTCString()\n                    ).slice(0, 22)\n                  : \"Loading\"}\n              </p>\n            </div>\n            <div className=\"chat__headerRight\">\n              <IconButton>\n                <SearchOutlined />\n              </IconButton>\n              <IconButton>\n                <AttachFile />\n              </IconButton>\n              <IconButton>\n                <MoreVertIcon />\n              </IconButton>\n            </div>\n          </div>\n          <div className=\"chat__body\">\n            {datewise.length > 0\n              ? datewise.map((item, i) =>\n                  item[Object.keys(item)].map((e, i) =>\n                    i == 0 ? (\n                      <>\n                        {parseInt(String(Object.keys(item)).slice(0, 2)) ? (\n                          <div className=\"chat__body__daystamp\">\n                            <p className=\"chat__body__daystamp__title\">\n                              {parseInt(\n                                String(Object.keys(item)).slice(0, 2)\n                              ) == parseInt(String(new Date().getDate()))\n                                ? \"TODAY\"\n                                : Object.keys(item)}\n                            </p>\n                          </div>\n                        ) : null}\n                        <p\n                          className={`chat__messages ${\n                            e.name === displayName && \"chat__reciever\"\n                          }`}\n                        >\n                          <span className=\"chat__name\">\n                            {e.name.substr(0, e.name.indexOf(\" \"))}\n                          </span>\n                          <Linkify>{e.messageData}</Linkify>\n                          <span className=\"chat__timestamp\">\n                            <div className=\"hidden\">\n                              {\n                                (extramin =\n                                  parseInt(\n                                    String(\n                                      new Date(\n                                        e.timestamp?.toDate()\n                                      ).toUTCString()\n                                    ).slice(20, 22)\n                                  ) +\n                                    parseInt(GMTminutes) >\n                                  60\n                                    ? (parseInt(\n                                        String(\n                                          new Date(\n                                            e.timestamp?.toDate()\n                                          ).toUTCString()\n                                        ).slice(20, 22)\n                                      ) +\n                                        parseInt(GMTminutes)) %\n                                      60\n                                    : 0)\n                              }\n\n                              {\n                                (minutes =\n                                  parseInt(\n                                    String(\n                                      new Date(\n                                        e.timestamp?.toDate()\n                                      ).toUTCString()\n                                    ).slice(20, 22)\n                                  ) +\n                                    parseInt(GMTminutes) +\n                                    extramin -\n                                    fix >\n                                  60\n                                    ? (parseInt(\n                                        String(\n                                          new Date(\n                                            e.timestamp?.toDate()\n                                          ).toUTCString()\n                                        ).slice(20, 22)\n                                      ) +\n                                        parseInt(GMTminutes) +\n                                        extramin -\n                                        fix) %\n                                      60\n                                    : parseInt(\n                                        String(\n                                          new Date(\n                                            e.timestamp?.toDate()\n                                          ).toUTCString()\n                                        ).slice(20, 22)\n                                      ) +\n                                      parseInt(GMTminutes) +\n                                      extramin -\n                                      fix)\n                              }\n                              {(hour = extramin > 0 ? 1 : 0)}\n\n                              {\n                                (hourly =\n                                  parseInt(\n                                    String(\n                                      new Date(\n                                        e.timestamp?.toDate()\n                                      ).toUTCString()\n                                    ).slice(17, 19)\n                                  ) +\n                                    hour +\n                                    parseInt(clientGMT) >\n                                  24\n                                    ? (parseInt(\n                                        String(\n                                          new Date(\n                                            e.timestamp?.toDate()\n                                          ).toUTCString()\n                                        ).slice(17, 19)\n                                      ) +\n                                        hour +\n                                        parseInt(clientGMT)) %\n                                      24\n                                    : parseInt(\n                                        String(\n                                          new Date(\n                                            e.timestamp?.toDate()\n                                          ).toUTCString()\n                                        ).slice(17, 19)\n                                      ) +\n                                      hour +\n                                      parseInt(clientGMT))\n                              }\n                            </div>\n                            {hourly ? hourly % 12 : \"00\"}\n                            {\" : \"}\n                            {minutes !== 0\n                              ? minutes < 10\n                                ? \"0\" + minutes\n                                : minutes\n                              : \"00\"}\n                            {hourly > 12 ? \" PM\" : \" AM\"}\n                          </span>\n                        </p>\n                      </>\n                    ) : (\n                      <p\n                        className={`chat__messages ${\n                          e.name === displayName && \"chat__reciever\"\n                        }`}\n                      >\n                        <span className=\"chat__name\">\n                          {e.name.substr(0, e.name.indexOf(\" \"))}\n                        </span>\n                        <Linkify>{e.messageData}</Linkify>\n                        <span className=\"chat__timestamp\">\n                          <div className=\"hidden\">\n                            {\n                              (extramin =\n                                parseInt(\n                                  String(\n                                    new Date(\n                                      e.timestamp?.toDate()\n                                    ).toUTCString()\n                                  ).slice(20, 22)\n                                ) +\n                                  parseInt(GMTminutes) >\n                                60\n                                  ? (parseInt(\n                                      String(\n                                        new Date(\n                                          e.timestamp?.toDate()\n                                        ).toUTCString()\n                                      ).slice(20, 22)\n                                    ) +\n                                      parseInt(GMTminutes)) %\n                                    60\n                                  : 0)\n                            }\n\n                            {\n                              (minutes =\n                                parseInt(\n                                  String(\n                                    new Date(\n                                      e.timestamp?.toDate()\n                                    ).toUTCString()\n                                  ).slice(20, 22)\n                                ) +\n                                  parseInt(GMTminutes) +\n                                  extramin -\n                                  fix >\n                                60\n                                  ? (parseInt(\n                                      String(\n                                        new Date(\n                                          e.timestamp?.toDate()\n                                        ).toUTCString()\n                                      ).slice(20, 22)\n                                    ) +\n                                      parseInt(GMTminutes) +\n                                      extramin -\n                                      fix) %\n                                    60\n                                  : parseInt(\n                                      String(\n                                        new Date(\n                                          e.timestamp?.toDate()\n                                        ).toUTCString()\n                                      ).slice(20, 22)\n                                    ) +\n                                    parseInt(GMTminutes) +\n                                    extramin -\n                                    fix)\n                            }\n                            {(hour = extramin > 0 ? 1 : 0)}\n\n                            {\n                              (hourly =\n                                parseInt(\n                                  String(\n                                    new Date(\n                                      e.timestamp?.toDate()\n                                    ).toUTCString()\n                                  ).slice(17, 19)\n                                ) +\n                                  hour +\n                                  parseInt(clientGMT) >\n                                24\n                                  ? (parseInt(\n                                      String(\n                                        new Date(\n                                          e.timestamp?.toDate()\n                                        ).toUTCString()\n                                      ).slice(17, 19)\n                                    ) +\n                                      hour +\n                                      parseInt(clientGMT)) %\n                                    24\n                                  : parseInt(\n                                      String(\n                                        new Date(\n                                          e.timestamp?.toDate()\n                                        ).toUTCString()\n                                      ).slice(17, 19)\n                                    ) +\n                                    hour +\n                                    parseInt(clientGMT))\n                            }\n                          </div>\n                          {hourly ? hourly % 12 : \"00\"}\n                          {\" : \"}\n                          {minutes !== 0\n                            ? minutes < 10\n                              ? \"0\" + minutes\n                              : minutes\n                            : \"00\"}\n                          {hourly > 12 ? \" PM\" : \" AM\"}\n                        </span>\n                      </p>\n                    )\n                  )\n                )\n              : null}\n            <div ref={messagesEndRef}></div>\n          </div>\n\n          <div className=\"chat__footer\">\n            <IconButton>\n              <InsertEmoticonIcon\n                className=\"yellow\"\n                onClick={() => setEmoji(!emoji)}\n              />\n              {emoji ? <Picker onSelect={addEmoji} /> : null}\n            </IconButton>\n\n            <form>\n              <input\n                value={input}\n                type=\"text\"\n                placeholder=\"Type a message\"\n                onChange={(e) => setInput(e.target.value)}\n                onClick={checkEmojiClose}\n                disabled={\n                  roomName === \"Admin: Ashutosh\"\n                    ? (displayName == \"Ashutosh Kumar\" ? true : false)\n                      ? false\n                      : true\n                    : false\n                }\n              />\n              <button type=\"submit\" onClick={sendMessage}>\n                Send A message\n              </button>\n            </form>\n            <IconButton>\n              <MicIcon />\n            </IconButton>\n          </div>\n\n          <div className=\"chat__footer__absolute\">\n            <IconButton>\n              <InsertEmoticonIcon />\n            </IconButton>\n            <form>\n              <input\n                value={input}\n                type=\"text\"\n                placeholder=\"Type a message\"\n                onChange={(e) => setInput(e.target.value)}\n                disabled={roomName == \"Admin: Ashutosh\" ? true : false}\n              />\n              <button type=\"submit\" onClick={sendMessage}>\n                Send A message\n              </button>\n            </form>\n            <IconButton>\n              <MicIcon />\n            </IconButton>\n          </div>\n        </div>\n      ) : (\n        <div className={\"chat\"}>\n          <div className=\"chat__header\">\n            <Avatar src={lastseenPhoto} />\n            <div className=\"chat__headerInfo\">\n              <h3>{roomName}</h3>\n              <p className=\"header__lastSeen\">\n                last seen{\" \"}\n                {messages.length !== 0\n                  ? String(\n                      messages[messages.length - 1].timestamp\n                        ?.toDate()\n                        .toUTCString()\n                    ).slice(0, 22)\n                  : \"Loading\"}\n              </p>\n            </div>\n            <div className=\"chat__headerRight\">\n              <IconButton>\n                <SearchOutlined />\n              </IconButton>\n              <IconButton>\n                <AttachFile />\n              </IconButton>\n              <IconButton>\n                <MoreVertIcon />\n              </IconButton>\n            </div>\n          </div>\n          <div\n            className=\"chat__body scrollbar-juicy-peach\"\n            onClick={checkEmojiClose}\n          >\n            {datewise.length > 0\n              ? datewise.map(\n                  (item, i) =>\n                    item[Object.keys(item)].map((e, i) =>\n                      i === 0 ? (\n                        <>\n                          {Object.keys(item) &&\n                          Object.keys(item) !== undefined ? (\n                            <div className=\"chat__body__daystamp\">\n                              <p className=\"chat__body__daystamp__title\">\n                                {parseInt(\n                                  String(Object.keys(item)).slice(0, 2)\n                                ) === parseInt(String(new Date().getDate()))\n                                  ? \"TODAY\"\n                                  : Object.keys(item)}\n                              </p>\n                            </div>\n                          ) : (\n                            \"\"\n                          )}\n                          <p\n                            className={`chat__messages ${\n                              e.name === displayName && \"chat__reciever\"\n                            }`}\n                          >\n                            <span className=\"chat__name\">\n                              {e.name.substr(0, e.name.indexOf(\" \"))}\n                            </span>\n                            <Linkify\n                              properties={{\n                                target: \"_blank\",\n                                style: { color: \"red\", fontWeight: \"bold\" },\n                              }}\n                            >\n                              {e.messageData}\n                            </Linkify>\n                            <span className=\"chat__timestamp\">\n                              <div className=\"hidden\">\n                                {\n                                  (extramin =\n                                    parseInt(\n                                      String(\n                                        new Date(\n                                          e.timestamp?.toDate()\n                                        ).toUTCString()\n                                      ).slice(20, 22)\n                                    ) +\n                                      parseInt(GMTminutes) >\n                                    60\n                                      ? (parseInt(\n                                          String(\n                                            new Date(\n                                              e.timestamp?.toDate()\n                                            ).toUTCString()\n                                          ).slice(20, 22)\n                                        ) +\n                                          parseInt(GMTminutes)) %\n                                        60\n                                      : 0)\n                                }\n\n                                {\n                                  (minutes =\n                                    parseInt(\n                                      String(\n                                        new Date(\n                                          e.timestamp?.toDate()\n                                        ).toUTCString()\n                                      ).slice(20, 22)\n                                    ) +\n                                      parseInt(GMTminutes) +\n                                      extramin -\n                                      fix >\n                                    60\n                                      ? (parseInt(\n                                          String(\n                                            new Date(\n                                              e.timestamp?.toDate()\n                                            ).toUTCString()\n                                          ).slice(20, 22)\n                                        ) +\n                                          parseInt(GMTminutes) +\n                                          extramin -\n                                          fix) %\n                                        60\n                                      : parseInt(\n                                          String(\n                                            new Date(\n                                              e.timestamp?.toDate()\n                                            ).toUTCString()\n                                          ).slice(20, 22)\n                                        ) +\n                                        parseInt(GMTminutes) +\n                                        extramin -\n                                        fix)\n                                }\n                                {(hour = extramin > 0 ? 1 : 0)}\n\n                                {\n                                  (hourly =\n                                    parseInt(\n                                      String(\n                                        new Date(\n                                          e.timestamp?.toDate()\n                                        ).toUTCString()\n                                      ).slice(17, 19)\n                                    ) +\n                                      hour +\n                                      parseInt(clientGMT) >\n                                    24\n                                      ? (parseInt(\n                                          String(\n                                            new Date(\n                                              e.timestamp?.toDate()\n                                            ).toUTCString()\n                                          ).slice(17, 19)\n                                        ) +\n                                          hour +\n                                          parseInt(clientGMT)) %\n                                        24\n                                      : parseInt(\n                                          String(\n                                            new Date(\n                                              e.timestamp?.toDate()\n                                            ).toUTCString()\n                                          ).slice(17, 19)\n                                        ) +\n                                        hour +\n                                        parseInt(clientGMT))\n                                }\n                              </div>\n                              {hourly ? hourly % 12 : \"00\"}\n                              {\" : \"}\n                              {minutes !== 0\n                                ? minutes < 10\n                                  ? \"0\" + minutes\n                                  : minutes\n                                : \"00\"}\n                              {hourly > 12 ? \" PM\" : \" AM\"}\n                            </span>\n                          </p>\n                        </>\n                      ) : (\n                        <p\n                          className={`chat__messages ${\n                            e.name === displayName && \"chat__reciever\"\n                          }`}\n                        >\n                          <span className=\"chat__name\">\n                            {e.name.substr(0, e.name.indexOf(\" \"))}\n                          </span>\n                          <Linkify>{e.messageData}</Linkify>\n                          <span className=\"chat__timestamp\">\n                            <div className=\"hidden\">\n                              {\n                                (extramin =\n                                  parseInt(\n                                    String(\n                                      new Date(\n                                        e.timestamp?.toDate()\n                                      ).toUTCString()\n                                    ).slice(20, 22)\n                                  ) +\n                                    parseInt(GMTminutes) >\n                                  60\n                                    ? (parseInt(\n                                        String(\n                                          new Date(\n                                            e.timestamp?.toDate()\n                                          ).toUTCString()\n                                        ).slice(20, 22)\n                                      ) +\n                                        parseInt(GMTminutes)) %\n                                      60\n                                    : 0)\n                              }\n\n                              {\n                                (minutes =\n                                  parseInt(\n                                    String(\n                                      new Date(\n                                        e.timestamp?.toDate()\n                                      ).toUTCString()\n                                    ).slice(20, 22)\n                                  ) +\n                                    parseInt(GMTminutes) +\n                                    extramin -\n                                    fix >\n                                  60\n                                    ? (parseInt(\n                                        String(\n                                          new Date(\n                                            e.timestamp?.toDate()\n                                          ).toUTCString()\n                                        ).slice(20, 22)\n                                      ) +\n                                        parseInt(GMTminutes) +\n                                        extramin -\n                                        fix) %\n                                      60\n                                    : parseInt(\n                                        String(\n                                          new Date(\n                                            e.timestamp?.toDate()\n                                          ).toUTCString()\n                                        ).slice(20, 22)\n                                      ) +\n                                      parseInt(GMTminutes) +\n                                      extramin -\n                                      fix)\n                              }\n                              {(hour = extramin > 0 ? 1 : 0)}\n\n                              {\n                                (hourly =\n                                  parseInt(\n                                    String(\n                                      new Date(\n                                        e.timestamp?.toDate()\n                                      ).toUTCString()\n                                    ).slice(17, 19)\n                                  ) +\n                                    hour +\n                                    parseInt(clientGMT) >\n                                  24\n                                    ? (parseInt(\n                                        String(\n                                          new Date(\n                                            e.timestamp?.toDate()\n                                          ).toUTCString()\n                                        ).slice(17, 19)\n                                      ) +\n                                        hour +\n                                        parseInt(clientGMT)) %\n                                      24\n                                    : parseInt(\n                                        String(\n                                          new Date(\n                                            e.timestamp?.toDate()\n                                          ).toUTCString()\n                                        ).slice(17, 19)\n                                      ) +\n                                      hour +\n                                      parseInt(clientGMT))\n                              }\n                            </div>\n                            {hourly ? hourly % 12 : \"00\"}\n                            {\" : \"}\n                            {minutes !== 0\n                              ? minutes < 10\n                                ? \"0\" + minutes\n                                : minutes\n                              : \"00\"}\n                            {hourly > 12 ? \" PM\" : \" AM\"}\n                          </span>\n                        </p>\n                      )\n                    )\n                )\n              : null}\n            <div ref={messagesEndRef} id=\"chat__box\"></div>\n          </div>\n\n          <div className=\"chat__footer\">\n            <IconButton>\n              <InsertEmoticonIcon\n                className=\"yellow\"\n                onClick={() => setEmoji(!emoji)}\n              />\n              {emoji ? <Picker onSelect={addEmoji} /> : null}\n            </IconButton>\n            <form>\n              <input\n                value={input}\n                type=\"text\"\n                placeholder=\"Type a message\"\n                onChange={(e) => setInput(e.target.value)}\n                onClick={checkEmojiClose}\n                disabled={\n                  roomName === \"Admin: Ali\"\n                    ? (displayName == \"Shekh Aliul WqnNsFNEPr\" ? true : false)\n                      ? false\n                      : true\n                    : false\n                }\n              />\n              <button type=\"submit\" onClick={sendMessage}>\n                Send A message\n              </button>\n            </form>\n            <IconButton>\n              <MicIcon />\n            </IconButton>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default Chat;\n","F:\\WhatsApp_clone_ashu\\whatsapp-clone-ashu\\src\\Loader.js",[],"F:\\WhatsApp_clone_ashu\\whatsapp-clone-ashu\\src\\firebase.js",[],"F:\\WhatsApp_clone_ashu\\whatsapp-clone-ashu\\src\\SidebarChat.js",["93","94","95","96","97"],"import React, { useEffect, useState } from \"react\";\nimport { Avatar } from \"@material-ui/core\";\nimport \"./SidebarChat.css\";\nimport db from \"./firebase\";\nimport { Link } from \"react-router-dom\";\nimport { useStateValue } from \"./StateProvider\";\nimport { actionTypes } from \"./reducer\";\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\";\nimport firebase from \"firebase\";\nimport { password } from \"./constants\";\nfunction SidebarChat(props) {\n  const [seed, setSeed] = useState(\"\");\n  const { addNewChatVal, name, id } = props;\n  const [messages, setMessages] = useState([]);\n  const [{ togglerState }, dispatch] = useStateValue();\n\n  useEffect(() => {\n    if (id) {\n      db.collection(\"rooms\")\n        .doc(id)\n        .collection(\"messages\")\n        .orderBy(\"timestamp\", \"desc\")\n        .onSnapshot((snapshot) =>\n          setMessages(snapshot.docs.map((doc) => doc.data()))\n        );\n    }\n  }, []);\n\n  useEffect(() => {\n    setSeed(Math.floor(Math.random() * 5000));\n  }, []);\n  const deleteRoom = () => {\n    const passwordVerify = prompt(\"Enter Admin Password to delete Room\");\n    if (passwordVerify == password) {\n      db.collection(\"rooms\")\n        .doc(id)\n        .delete()\n        .then(function () {\n          window.location = \"/\";\n        })\n        .catch(function (error) {\n          console.error(\"Error removing document: \", error);\n        });\n    } else {\n      alert(\"You are not authorised to delete rooms\");\n    }\n  };\n\n  const createChat = () => {\n    const roomName = prompt(\"Please enter name for chat\");\n    if (roomName && roomName.length >= 20) {\n      return alert(\"enter a shorter name for the room\");\n    }\n    if (roomName) {\n      db.collection(\"rooms\").add({\n        name: roomName,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n      });\n    }\n  };\n\n  const handleChat = () => {\n    dispatch({\n      type: actionTypes.SET_TOGGLER,\n      togglerState: togglerState + 1,\n    });\n  };\n\n  return addNewChatVal !== \"true\" ? (\n    <div className=\"sidebarChat\">\n      <Link to={`/rooms/${id}`} onClick={handleChat}>\n        <div className=\"sidebarChat__wrapper\">\n          <Avatar src={messages[0]?.photoURL} />\n          <div className=\"sidebarChat__info\">\n            <h2 className=\"room__name\">{name}</h2>\n            <p className=\"sidebar__lastmessages__color\">\n              <span className=\"sidebar__lastMessageName\">\n                {id != \"\" && messages.length > 0\n                  ? messages[0]?.name + \": \"\n                  : \"Loading: \"}\n              </span>\n              {id != \"\" && messages.length > 0\n                ? messages[0]?.message\n                : \"Start a new chat\"}\n            </p>\n          </div>\n        </div>\n      </Link>\n      <div className=\"sidebarChat__delete\" onClick={deleteRoom}>\n        <DeleteForeverIcon />\n      </div>\n    </div>\n  ) : (\n    <div onClick={createChat} className=\"sidebarChat addnew__chat\">\n      <h2>Add New Room</h2>\n      <AddCircleIcon />\n    </div>\n  );\n}\n\nexport default SidebarChat;\n","F:\\WhatsApp_clone_ashu\\whatsapp-clone-ashu\\src\\constants.js",[],{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"103","line":11,"column":20,"nodeType":"104","messageId":"105","endLine":11,"endColumn":28},{"ruleId":"102","severity":1,"message":"106","line":12,"column":11,"nodeType":"104","messageId":"105","endLine":12,"endColumn":16},{"ruleId":"102","severity":1,"message":"107","line":2,"column":10,"nodeType":"104","messageId":"105","endLine":2,"endColumn":16},{"ruleId":"108","severity":1,"message":"109","line":8,"column":1,"nodeType":"110","messageId":"111","endLine":8,"endColumn":60},{"ruleId":"112","severity":1,"message":"113","line":10,"column":10,"nodeType":"114","messageId":"115","endLine":10,"endColumn":12},{"ruleId":"102","severity":1,"message":"116","line":2,"column":18,"nodeType":"104","messageId":"105","endLine":2,"endColumn":26},{"ruleId":"102","severity":1,"message":"117","line":23,"column":10,"nodeType":"104","messageId":"105","endLine":23,"endColumn":16},{"ruleId":"118","severity":1,"message":"119","line":45,"column":6,"nodeType":"120","endLine":45,"endColumn":13,"suggestions":"121"},{"ruleId":"118","severity":1,"message":"122","line":66,"column":6,"nodeType":"120","endLine":66,"endColumn":20,"suggestions":"123"},{"ruleId":"102","severity":1,"message":"124","line":79,"column":9,"nodeType":"104","messageId":"105","endLine":79,"endColumn":20},{"ruleId":"125","severity":1,"message":"126","line":187,"column":29,"nodeType":"127","messageId":"115","endLine":187,"endColumn":31},{"ruleId":"102","severity":1,"message":"128","line":12,"column":10,"nodeType":"104","messageId":"105","endLine":12,"endColumn":14},{"ruleId":"102","severity":1,"message":"129","line":22,"column":10,"nodeType":"104","messageId":"105","endLine":22,"endColumn":14},{"ruleId":"102","severity":1,"message":"130","line":30,"column":12,"nodeType":"104","messageId":"105","endLine":30,"endColumn":20},{"ruleId":"102","severity":1,"message":"131","line":42,"column":5,"nodeType":"104","messageId":"105","endLine":42,"endColumn":9},{"ruleId":"118","severity":1,"message":"132","line":72,"column":3,"nodeType":"104","endLine":72,"endColumn":12,"suggestions":"133"},{"ruleId":"102","severity":1,"message":"134","line":118,"column":9,"nodeType":"104","messageId":"105","endLine":118,"endColumn":18},{"ruleId":"125","severity":1,"message":"126","line":134,"column":49,"nodeType":"127","messageId":"115","endLine":134,"endColumn":51},{"ruleId":"125","severity":1,"message":"126","line":150,"column":30,"nodeType":"127","messageId":"115","endLine":150,"endColumn":32},{"ruleId":"125","severity":1,"message":"135","line":166,"column":25,"nodeType":"127","messageId":"115","endLine":166,"endColumn":27},{"ruleId":"125","severity":1,"message":"126","line":166,"column":50,"nodeType":"127","messageId":"115","endLine":166,"endColumn":52},{"ruleId":"118","severity":1,"message":"136","line":176,"column":6,"nodeType":"120","endLine":176,"endColumn":16,"suggestions":"137"},{"ruleId":"118","severity":1,"message":"122","line":190,"column":6,"nodeType":"120","endLine":190,"endColumn":20,"suggestions":"138"},{"ruleId":"125","severity":1,"message":"126","line":278,"column":23,"nodeType":"127","messageId":"115","endLine":278,"endColumn":25},{"ruleId":"125","severity":1,"message":"126","line":285,"column":33,"nodeType":"127","messageId":"115","endLine":285,"endColumn":35},{"ruleId":"125","severity":1,"message":"126","line":546,"column":36,"nodeType":"127","messageId":"115","endLine":546,"endColumn":38},{"ruleId":"125","severity":1,"message":"126","line":571,"column":36,"nodeType":"127","messageId":"115","endLine":571,"endColumn":38},{"ruleId":"125","severity":1,"message":"126","line":896,"column":36,"nodeType":"127","messageId":"115","endLine":896,"endColumn":38},{"ruleId":"102","severity":1,"message":"129","line":13,"column":10,"nodeType":"104","messageId":"105","endLine":13,"endColumn":14},{"ruleId":"118","severity":1,"message":"139","line":28,"column":6,"nodeType":"120","endLine":28,"endColumn":8,"suggestions":"140"},{"ruleId":"125","severity":1,"message":"126","line":35,"column":24,"nodeType":"127","messageId":"115","endLine":35,"endColumn":26},{"ruleId":"125","severity":1,"message":"135","line":79,"column":21,"nodeType":"127","messageId":"115","endLine":79,"endColumn":23},{"ruleId":"125","severity":1,"message":"135","line":83,"column":19,"nodeType":"127","messageId":"115","endLine":83,"endColumn":21},"no-native-reassign",["141"],"no-negated-in-lhs",["142"],"no-unused-vars","'dispatch' is assigned a value but never used.","Identifier","unusedVar","'width' is assigned a value but never used.","'Button' is defined but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'Collapse' is defined but never used.","'logout' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'rooms'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setSearch' needs the current value of 'rooms'.","ArrayExpression",["143"],"React Hook useEffect has a missing dependency: 'toggler'. Either include it or remove the dependency array. You can also do a functional update 'setToggler(t => ...)' if you only need 'toggler' in the 'setToggler' call.",["144"],"'displayName' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","'Link' is defined but never used.","'seed' is assigned a value but never used.","'photoURL' is assigned a value but never used.","'scrl' is defined but never used.","React Hook useEffect contains a call to 'setClinetGMT'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [] as a second argument to the useEffect Hook.",["145"],"'checkDate' is assigned a value but never used.","Expected '!==' and instead saw '!='.","React Hook useEffect has a missing dependency: 'TotalObj'. Either include it or remove the dependency array.",["146"],["147"],"React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["148"],"no-global-assign","no-unsafe-negation",{"desc":"149","fix":"150"},{"desc":"151","fix":"152"},{"desc":"153","fix":"154"},{"desc":"155","fix":"156"},{"desc":"151","fix":"157"},{"desc":"158","fix":"159"},"Update the dependencies array to be: [input, rooms]",{"range":"160","text":"161"},"Update the dependencies array to be: [toggler, togglerState]",{"range":"162","text":"163"},"Add dependencies array: []",{"range":"164","text":"165"},"Update the dependencies array to be: [TotalObj, messages]",{"range":"166","text":"167"},{"range":"168","text":"163"},"Update the dependencies array to be: [id]",{"range":"169","text":"170"},[1618,1625],"[input, rooms]",[2029,2043],"[toggler, togglerState]",[2441,2441],", []",[5379,5389],"[TotalObj, messages]",[5679,5693],[969,971],"[id]"]